{"version":3,"sources":["utils/Stage.tsx","modules/Grid.tsx","utils/LifeUtils.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Stage","Grid","props","className","data-status","actualGrid","map","rVal","rInd","key","val","ind","data-type","onMouseDown","console","log","currentStage","Fill","copy","setGrid","fillCell","GetNearAliveOf","world","x","y","nb","_x","_y","count","k","Array","i","j","GetNearOf","length","CopyWorld","pworld","App","previousWorld","useState","setStage","gridSize","setSize","isIntervalActive","setIntervalActivity","useEffect","clearArea","simulationStep","pool","fill","stopSimulation","newGen","nearAlive","tempCell","LU","JSON","stringify","setTimeout","type","min","max","value","onChange","e","element","target","Number","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uMAAKA,E,8EAAAA,O,eAAAA,I,uBAAAA,I,gBAAAA,M,KAKUA,QCsCAC,EAhCF,SAACC,GAWZ,OACE,yBAAKC,UAAU,aAAaC,cAAY,WACtC,2BAAOD,UAAU,eACdD,EAAMG,WAAWC,KAAI,SAACC,EAAMC,GAAP,OACpB,wBAAIL,UAAU,MAAMM,IAAK,IAAMD,GAC5BD,EAAKD,KAAI,SAACI,EAAKC,GAAN,OACR,wBACER,UAAU,OACVM,IAAK,IAAMD,EAAO,IAAMG,EACxBC,YAAWF,EAAM,SAAW,QAC5BG,YAAa,kBApBV,SAACL,EAAcG,GAE9B,GADAG,QAAQC,IAAI,YAAcP,EAAO,IAAMG,EAAM,KACzCT,EAAMc,eAAiBhB,EAAMiB,KAAM,OAAO,EAC9C,IAAIC,EAAI,YAAOhB,EAAMG,YAIrB,OAFAa,EAAKV,GAAMG,GAAOO,EAAKV,GAAMG,GAAO,EAAI,EACxCT,EAAMiB,QAAQD,IACP,EAawBE,CAASZ,EAAMG,gBCJ5CU,EAAiB,SAACC,EAAmBC,EAAWC,GACpD,IACIC,EACAC,EAAYC,EAFZC,EAAQ,EAIZH,EArBgB,SAACF,EAAWC,GAI5B,IAHA,IAAIK,EAAY,EACZJ,EAAiB,IAAIK,MAAM,GAEtBC,EAAIR,EAAI,EAAGQ,GAAKR,EAAI,EAAGQ,IAC9B,IAAK,IAAIC,EAAIR,EAAI,EAAGQ,GAAKR,EAAI,EAAGQ,IAC1BD,IAAMR,GAAKS,IAAMR,IAGrBC,EAAGI,GAAK,CAACE,EAAGC,GACZH,KAGJ,OAAOJ,EAQFQ,CAAUV,EAAGC,GAElB,IAAK,IAAIO,EAAI,EAAGA,EAAI,EAAGA,IAAK,mBACdN,EAAGM,GADW,GACxBL,EADwB,KACpBC,EADoB,MAGtBD,EAAK,GAAKC,EAAK,KACjBD,GAAMJ,EAAMY,OAASR,GAAMJ,EAAMY,OACjCP,GAAML,EAAM,GAAGY,OAASP,GAAML,EAAM,GAAGY,SAGrCR,GAAMJ,EAAMY,QAAUP,GAAML,EAAM,GAAGY,UACvCR,GAAMJ,EAAMY,OAASR,GAAMJ,EAAMY,OACjCP,GAAML,EAAM,GAAGY,OAASP,GAAML,EAAM,GAAGY,QAGnB,IAAlBZ,EAAMI,GAAIC,IACZC,IAIJ,OAAOA,GA0BHO,EAAY,SAACC,GAEjB,IADA,IAAId,EAAoB,IAAIQ,MAAMM,EAAOF,QAChCH,EAAI,EAAGA,EAAIK,EAAOF,OAAQH,IAAK,CACtCT,EAAMS,GAAK,IAAID,MAAMM,EAAO,GAAGF,QAC/B,IAAK,IAAIF,EAAI,EAAGA,EAAII,EAAO,GAAGF,OAAQF,IACpCV,EAAMS,GAAGC,GAAKI,EAAOL,GAAGC,GAG5B,OAAOV,GC0BMe,MAzGf,WAAgB,IAKVC,EALS,EACiBC,mBAAqB,IADtC,mBACNlC,EADM,KACMc,EADN,OAEoBoB,mBAAgBvC,EAAMiB,MAF1C,mBAEND,EAFM,KAEQwB,EAFR,OAGeD,mBAND,IAGd,mBAGNE,EAHM,KAGIC,EAHJ,OAImCH,oBAAS,GAJ5C,mBAINI,EAJM,KAIYC,EAJZ,KAObC,qBAAU,cACP,IAEHA,qBAAU,WACRC,MACC,CAACL,IAEJI,qBAAW,WACJF,EAGHI,IAFAjC,QAAQC,IAAI,gBAIb,CAACV,IAEJ,IAAMyC,EAAY,WAEhB,IADA,IAAIE,EAAO,GACFjB,EAAI,EAAGA,EAAIU,EAAUV,IAC5BiB,EAAKjB,GAAK,IAAID,MAAMW,GAAUQ,KAAK,GAErC9B,EAAQ6B,GACRV,EAAgBU,GAQZE,EAAiB,WACrBN,GAAoB,IAQhBG,EAAiB,WAGrB,IAAII,EDAkB,SAACf,GAIzB,IAHA,IAAIgB,EAAmBC,EACnB/B,EAAQa,EAAUC,GAEbL,EAAI,EAAGA,EAAIK,EAAOF,OAAQH,IACjC,IAAK,IAAIC,EAAI,EAAGA,EAAII,EAAO,GAAGF,OAAQF,IACpCqB,EAAWjB,EAAOL,GAAGC,GACrBoB,EAAY/B,EAAee,EAAQL,EAAGC,GAErB,IAAbqB,EACgB,IAAdD,IACF9B,EAAMS,GAAGC,GAAK,IAGZoB,GAAa,GAAKA,GAAa,KACjC9B,EAAMS,GAAGC,GAAK,GAKtB,OAAOV,ECpBQgC,CAFbhB,EAAgBgB,EAAajD,IAe7B,OAXIkD,KAAKC,UAAUL,KAAYI,KAAKC,UAAUlB,KAC5CxB,QAAQC,IAAI,eACZmC,KAE4B,ID9Df,SAAC5B,GAElB,IADA,IAAIM,EAAgB,EACXG,EAAI,EAAGA,EAAIT,EAAMY,OAAQH,IAChC,IAAK,IAAIC,EAAI,EAAGA,EAAIV,EAAM,GAAGY,OAAQF,IACf,IAAhBV,EAAMS,GAAGC,IACXJ,IAIN,OAAOA,ECqDD0B,CAAcH,KAChBrC,QAAQC,IAAI,YACZmC,KAGFO,YAAW,WAAOtC,EAAQgC,KA7DA,MA+DnB,GAGT,OACE,yBAAKhD,UAAU,OACb,4CACA,2BACEuD,KAAK,QACLC,IAAI,KACJC,IAAI,KACJC,MAAOpB,EACPqB,SAAU,SAACC,GAAD,OAzCGC,EAyC2BD,EAAEE,OAxC9Cf,SACAR,EAAQwB,OAAM,OAACF,QAAD,IAACA,OAAD,EAACA,EAASH,QAFR,IAACG,KA2Cf,6BAECrB,EACC,2BACEe,KAAK,SACLvD,UAAU,mBACV0D,MAAM,OACNM,QAAS,kBAAMjB,OAGjB,2BACEQ,KAAK,SACLG,MAAM,WACN1D,UAAU,mBACVgE,QAAS,kBA/CfvB,GAAoB,QACpBG,OAiDE,2BAAOW,KAAK,SAASG,MAAM,aAAaM,QAAS,kBAAMrB,OAEvD,0BAAM3C,UAAU,YACd,kBAAC,EAAD,CACEgB,QAASA,EACTd,WAAYA,EACZmC,SAAUA,EACVxB,aAAcA,OC9FJoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvE,QAAQuE,MAAMA,EAAMC,c","file":"static/js/main.84605f83.chunk.js","sourcesContent":["enum Stage {\r\n    Fill,\r\n    Simulate,\r\n    Stop\r\n}\r\nexport default Stage;\r\n","import React from 'react'\nimport './Grid.css'\nimport Stage from '../utils/Stage'\n\ninterface IProps {\n  actualGrid: number[][]\n  setGrid: (grid: number[][]) => void\n  currentStage: Stage\n  setStage: (stage: Stage) => void\n}\n\nconst Grid = (props: IProps) => {\n  const fillCell = (rInd: number, ind: number) => {\n    console.log('Took on [' + rInd + ';' + ind + ']')\n    if (props.currentStage !== Stage.Fill) return false\n    let copy = [...props.actualGrid]\n    //copy[rInd][ind] = Math.abs(props.actualGrid[ind][rInd] - 1)\n    copy[rInd][ind] = copy[rInd][ind] ? 0 : 1\n    props.setGrid(copy)\n    return false\n  }\n\n  return (\n    <div className=\"Grid--main\" data-status=\"filling\">\n      <table className=\"Grid--table\">\n        {props.actualGrid.map((rVal, rInd) => (\n          <tr className=\"Row\" key={\"r\" + rInd}>\n            {rVal.map((val, ind) => (\n              <td\n                className=\"Cell\"\n                key={\"r\" + rInd + \"c\" + ind}\n                data-type={val ? 'filled' : 'empty'}\n                onMouseDown={() => fillCell(rInd, ind)}\n\n              />\n            ))}\n          </tr>\n        ))}\n      </table>\n    </div>\n  )\n}\n\nexport default Grid\n","const CountAlive = (world: number[][]) => {\n  let count: number = 0\n  for (let i = 0; i < world.length; i++) {\n    for (let j = 0; j < world[0].length; j++) {\n      if (world[i][j] === 1) {\n        count++\n      }\n    }\n  }\n  return count\n}\n\nconst GetNearOf = (x: number, y: number) => {\n  let k: number = 0\n  let nb: number[][] = new Array(8)\n\n  for (let i = x - 1; i <= x + 1; i++) {\n    for (let j = y - 1; j <= y + 1; j++) {\n      if (i === x && j === y) {\n        continue\n      }\n      nb[k] = [i, j]\n      k++\n    }\n  }\n  return nb\n}\n\nconst GetNearAliveOf = (world: number[][], x: number, y: number) => {\n  let count = 0\n  let nb: number[][]\n  let _x: number, _y: number\n\n  nb = GetNearOf(x, y)\n\n  for (let i = 0; i < 8; i++) {\n    ;[_x, _y] = nb[i]\n\n    if (_x < 0 || _y < 0) {\n      _x = (world.length + _x) % world.length\n      _y = (world[0].length + _y) % world[0].length\n    }\n\n    if (_x >= world.length || _y >= world[0].length) {\n      _x = (world.length + _x) % world.length\n      _y = (world[0].length + _y) % world[0].length\n    }\n\n    if (world[_x][_y] === 1) {\n      count++\n    }\n  }\n\n  return count\n}\n\nconst GetNextGeneration = (pworld: number[][]) => {\n  let nearAlive: number, tempCell: number\n  let world = CopyWorld(pworld)\n\n  for (let i = 0; i < pworld.length; i++) {\n    for (let j = 0; j < pworld[0].length; j++) {\n      tempCell = pworld[i][j]\n      nearAlive = GetNearAliveOf(pworld, i, j)\n\n      if (tempCell === 0) {\n        if (nearAlive === 3) {\n          world[i][j] = 1\n        }\n      } else {\n        if (nearAlive <= 1 || nearAlive >= 4) {\n          world[i][j] = 0\n        }\n      }\n    }\n  }\n  return world\n}\n\nconst CopyWorld = (pworld: number[][]) => {\n  let world: number[][] = new Array(pworld.length)\n  for (let i = 0; i < pworld.length; i++) {\n    world[i] = new Array(pworld[0].length)\n    for (let j = 0; j < pworld[0].length; j++) {\n      world[i][j] = pworld[i][j]\n    }\n  }\n  return world\n}\n\nexport { CountAlive, GetNearOf, GetNearAliveOf, GetNextGeneration, CopyWorld }\n","import React, { useState, useEffect, ChangeEvent } from 'react'\nimport './App.css'\nimport Grid from './modules/Grid'\nimport Stage from './utils/Stage'\nimport * as LU from './utils/LifeUtils'\nconst INITIAL_SIZE: number = 12\nconst INITIAL_DELAY: number = 100\n\nfunction App() {\n  const [actualGrid, setGrid] = useState<number[][]>([])\n  const [currentStage, setStage] = useState<Stage>(Stage.Fill)\n  const [gridSize, setSize] = useState<number>(INITIAL_SIZE)\n  const [isIntervalActive, setIntervalActivity] = useState(false)\n  let previousWorld: number[][]\n\n  useEffect(() => {\n  }, [])\n\n  useEffect(() => {\n    clearArea()\n  }, [gridSize])\n\n  useEffect( () => {\n    if (!isIntervalActive) {\n      console.log('null fired')\n    } else {\n      simulationStep()\n    }\n  }, [actualGrid])\n\n  const clearArea = () => {\n    let pool = []\n    for (let i = 0; i < gridSize; i++) {\n      pool[i] = new Array(gridSize).fill(0)\n    }\n    setGrid(pool)\n    previousWorld = pool\n  }\n\n  const applySize = (element: any) => {\n    stopSimulation()\n    setSize(Number(element?.value))\n  }\n\n  const stopSimulation = () => {\n    setIntervalActivity(false)\n  }\n\n  const startSimulation = () => {\n    setIntervalActivity(true)\n    simulationStep()\n  }\n\n  const simulationStep = () => {\n    previousWorld = LU.CopyWorld(actualGrid)\n\n    let newGen = LU.GetNextGeneration(previousWorld)\n    //console.log(newGen)\n    if (JSON.stringify(newGen) === JSON.stringify(previousWorld)) {\n      console.log('Stable loop')\n      stopSimulation()\n    }\n    if (LU.CountAlive(newGen) === 0) {\n      console.log('all dead')\n      stopSimulation()\n    }\n\n    setTimeout(() => {setGrid(newGen)}, INITIAL_DELAY);\n\n    return false\n  }\n\n  return (\n    <div className=\"App\">\n      <label>Grid Size</label>\n      <input\n        type=\"range\"\n        min=\"10\"\n        max=\"60\"\n        value={gridSize}\n        onChange={(e: ChangeEvent) => applySize(e.target)}\n      />\n      <br />\n\n      {isIntervalActive ? (\n        <input\n          type=\"button\"\n          className=\"startstop_button\"\n          value=\"Stop\"\n          onClick={() => stopSimulation()}\n        />\n      ) : (\n        <input\n          type=\"button\"\n          value=\"Simulate\"\n          className=\"startstop_button\"\n          onClick={() => startSimulation()}\n        />\n      )}\n      <input type=\"button\" value=\"Clear Area\" onClick={() => clearArea()} />\n\n      <main className=\"App-main\">\n        <Grid\n          setGrid={setGrid}\n          actualGrid={actualGrid}\n          setStage={setStage}\n          currentStage={currentStage}\n        />\n      </main>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}